#!/bin/bash

JSON=/usr/local/etc/scenario-status.json

STEPCOUNTERFILE=/usr/local/share/step-counter.txt

TOTALSTEPS=8

VERBOSE=0
AUTOMATIC=0

function vprint {
        # print if verbose is set
        if [ $VERBOSE -eq 1 ]; then
                echo "$1"
        fi
}


function usage {

        echo
        echo "`basename $0` [OPTIONS] "
        echo
        echo "A script to check the status of the teaching scenario."
        echo
        echo " -a --automatic    Automatic mode."
        echo " -h --help         This text"
	echo " -m --minstep STR  First step that should be checked."
        echo " -s --step STR     Final step that should be checked."
        echo " -v --verbose      Verbose output"
        echo " -?                This text"
	echo
	echo "By default, all steps up to the value in the step-counter file"
	echo "will be counted. The step-counter file is updated by Katacoda"
	echo "and keeps track of the scenario steps as you advance."
	echo 
	echo "`basename $0` --step 5 will check from step 1 to step 5."
	echo
	echo "`basename $0` --minstep 5 will check from step 5 to the end of the scenario."
	echo
	echo "`basename $0` --minstep 5 --step 5 will check step 5."
	echo
	echo "The automatic mode is a separate mode used by Katacoda"
	echo "scripts. It depends on an output of \"done\" on the final"
	echo "line of the output. Katacoda will then determine that the"
	echo "check was successful."
        echo
}

# param checking loop
while [ 1 ]
do
	if [ -n "$1" ]; then
		ARG="$1"
		export FC="`echo $ARG | sed -e 's/^\(.\).*/\1/'`"   # first char of $ARG
		if [ "-" = $FC ]; then
			case $1 in
				-a) export AUTOMATIC=1;;
				--automatic) export AUTOMATIC=1;;
				-h) usage; exit;;
				--help) usage; exit;;
				-v) export VERBOSE=1;;
				--verbose) export VERBOSE=1;;
				-m) export MINSTEP="$2";shift;;
				--minstep) export MINSTEP="$2";shift;;
				-s) export MAXSTEP="$2";shift;;
				--step) export MAXSTEP="$2";shift;;
				-\?) usage; exit;;
			esac
			shift		
		else
			break
		fi
	else
		break
	fi
done


if [ ! -f $STEPCOUNTERFILE ]; then
	STEPCOUNTER=1
else
	STEPCOUNTER=$(head -n 1 $STEPCOUNTERFILE)
fi

if [ -z "$MINSTEP" ]; then
	MINSTEP=$STEPCOUNTER
fi

if [ -z "$MAXSTEP" ]; then
	MAXSTEP=$STEPCOUNTER
fi

for STEP in $(seq $MINSTEP 1 $MAXSTEP); do
	if [ ! $AUTOMATIC -eq 1 ]; then
		echo -n "Checking step $STEP ... "
	fi
	ITEMS=$(cat $JSON | jq '.[].scenario1[][] | select(.step == "step-'$STEP'").items' | jq length) 
	N=0
	while [[ $N -lt $ITEMS ]]; do 
		OPERATOR=$(jq '.[].scenario1[][] | select(.step == "step-'$STEP'").items['$N'].operator' $JSON | tr -d \") 
		TARGET=$(jq '.[].scenario1[][] | select(.step == "step-'$STEP'").items['$N'].target' $JSON| tr -d \") 
		FAILMSG=$(jq '.[].scenario1[][] | select(.step == "step-'$STEP'").items['$N'].failmsg' $JSON | sed -e "s/^.//" -e "s/.$//" -e 's/\\"/"/g')
		SUCCESSMSG=$(jq '.[].scenario1[][] | select(.step == "step-'$STEP'").items['$N'].successmsg' $JSON | sed -e "s/^.//" -e "s/.$//" -e 's/\\"/"/g') 
		FAILMSG=$(echo "$FAILMSG" | sed -e "s:\$TARGET:$TARGET:g")
		SUCCESSMSG=$(echo "$SUCCESSMSG" | sed -e "s:\$TARGET:$TARGET:g")

		case $OPERATOR in
		"file-exists")
			if [ ! -f $TARGET ]; then
				echo "FAIL"
				echo " $FAILMSG"
				exit 1
			else
				vprint " $SUCCESSMSG"
			fi
			;;
		"folder-exists")
			if [ ! -d $TARGET ]; then
				echo "FAIL"
				echo " $FAILMSG"
				exit 1
			else
				vprint " $SUCCESSMSG"
			fi
			;;
		"softlink-exists")
			if [ ! -L $TARGET ]; then
				echo "FAIL"
				echo " $FAILMSG"
				exit 1
			else
				vprint " $SUCCESSMSG"
			fi
			;;
		"tail1-contains")
			TARGETSTRING=$(jq '.[].scenario1[][] | select(.step == "step-'$STEP'").items['$N'].targetstring' $JSON| tr -d \") 
			if [ ! "$(tail -1 $TARGET)" == "$TARGETSTRING" ]; then
				echo "FAIL"
				echo " $FAILMSG"
				exit 1
			else
				vprint " $SUCCESSMSG"
			fi
			;;
		"file-contains")
			TARGETSTRING=$(jq '.[].scenario1[][] | select(.step == "step-'$STEP'").items['$N'].targetstring' $JSON| tr -d \") 
			grep -q "$TARGETSTRING" $TARGET
			if [ ! $? -eq 0 ]; then
				echo "FAIL"
				echo " $FAILMSG"
				exit 1
			else
				vprint " $SUCCESSMSG"
			fi
			;;
		"pkg-installed")
			pkg -l $TARGET &> /dev/null
			if [ $? -eq 1 ]; then
				echo "FAIL"
				echo " $FAILMSG"
				exit 1
			else
				vprint " $SUCCESSMSG"
			fi
			;;
		*)
			echo "Operator $OPERATOR unknown. This is fatal. Aborting."
			exit 1
			;;
		esac

		let N=$N+1
	done

	if [ ! $AUTOMATIC -eq 1 ]; then
		echo "success"
	fi

done

if [ $MAXSTEP -eq $TOTALSTEPS ]; then
	echo "You have completed the entire scenario successfully. Congratulations!"
fi

if [ $AUTOMATIC -eq 1 ]; then
	echo "done"
fi
